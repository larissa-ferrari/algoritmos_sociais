# Algoritmos Sociais de Busca em C

Este projeto implementa e compara variaÃ§Ãµes do algoritmo PSO (Particle Swarm Optimization) utilizando os modelos:

- âœ… PSO Base (com e sem controle de velocidade)
- âœ… PSO com InÃ©rcia
- âœ… Modelo Predador-Presa
- âœ… Modelo de PartÃ­culas Carregadas

As otimizaÃ§Ãµes sÃ£o feitas sobre duas funÃ§Ãµes conhecidas:
- ğŸ“‰ Rastrigin
- ğŸ“‰ Rosenbrock

Os dados sÃ£o exportados e analisados com grÃ¡ficos em Python.

---

## ğŸ“¦ Estrutura do projeto

```
algoritmos_sociais/
â”œâ”€â”€ src/                       # CÃ³digo-fonte em C
â”œâ”€â”€ include/                   # Arquivos de cabeÃ§alho (.h)
â”œâ”€â”€ dados_saida/              # Resultados gerados (CSVs)
â”œâ”€â”€ graficos/
â”‚   â””â”€â”€ plot_resultados.py    # Script Python para gerar grÃ¡ficos
â”œâ”€â”€ Makefile                  # CompilaÃ§Ã£o automatizada
â””â”€â”€ main                      # ExecutÃ¡vel (gerado apÃ³s `make`)
```

---

## ğŸš€ Como rodar o projeto

### 1. Requisitos

- Compilador C (ex: `gcc`)
- Python 3 com bibliotecas:
  - `matplotlib`
  - `seaborn`
  - `pandas`

Para instalar:
```bash
pip install matplotlib seaborn pandas
```

### 2. Compilar e executar os algoritmos

No terminal, rode:

```bash
make
./main
```

Isso vai:
- Executar todas as simulaÃ§Ãµes com diferentes mÃ©todos e parÃ¢metros
- Gerar arquivos CSV com os resultados em `dados_saida/`

### 3. Gerar grÃ¡ficos a partir dos dados

```bash
cd graficos
python3 plot_resultados.py
```

Os grÃ¡ficos serÃ£o salvos automaticamente na pasta `graficos/`.

---

## ğŸ“Š GrÃ¡ficos gerados

- **Boxplots por funÃ§Ã£o (rastrigin, rosenbrock)**
- **Barras com mÃ©dias e desvios por mÃ©todo**
- **Comparativos por modelo (Base, Predador-Presa, Carga)**
- **(Em breve) ConvergÃªncia por iteraÃ§Ã£o**

---

## ğŸ“Œ ObservaÃ§Ãµes

- O arquivo `main.c` limpa os arquivos CSV a cada nova execuÃ§Ã£o.
- Todos os resultados sÃ£o baseados em **10 execuÃ§Ãµes por cenÃ¡rio**.
- Use `make clean` para remover o executÃ¡vel.

---

## âœ¨ Autores


